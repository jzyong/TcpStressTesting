// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: StressTestingInnerRpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StressTestingInnerServiceClient is the client API for StressTestingInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StressTestingInnerServiceClient interface {
	// 连接master
	ConnectMaster(ctx context.Context, in *ConnectMasterRequest, opts ...grpc.CallOption) (*ConnectMasterResponse, error)
	// 玩家登录
	PlayerLogin(ctx context.Context, in *PlayerLoginRequest, opts ...grpc.CallOption) (*PlayerLoginResponse, error)
	// 所有玩家停止压力测试
	PlayerAllQuit(ctx context.Context, in *PlayerAllQuitRequest, opts ...grpc.CallOption) (*PlayerAllQuitResponse, error)
	// 上传统计日志
	UploadStatistics(ctx context.Context, in *UploadStatisticsRequest, opts ...grpc.CallOption) (*UploadStatisticsResponse, error)
}

type stressTestingInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStressTestingInnerServiceClient(cc grpc.ClientConnInterface) StressTestingInnerServiceClient {
	return &stressTestingInnerServiceClient{cc}
}

func (c *stressTestingInnerServiceClient) ConnectMaster(ctx context.Context, in *ConnectMasterRequest, opts ...grpc.CallOption) (*ConnectMasterResponse, error) {
	out := new(ConnectMasterResponse)
	err := c.cc.Invoke(ctx, "/StressTestingInnerService/connectMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stressTestingInnerServiceClient) PlayerLogin(ctx context.Context, in *PlayerLoginRequest, opts ...grpc.CallOption) (*PlayerLoginResponse, error) {
	out := new(PlayerLoginResponse)
	err := c.cc.Invoke(ctx, "/StressTestingInnerService/playerLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stressTestingInnerServiceClient) PlayerAllQuit(ctx context.Context, in *PlayerAllQuitRequest, opts ...grpc.CallOption) (*PlayerAllQuitResponse, error) {
	out := new(PlayerAllQuitResponse)
	err := c.cc.Invoke(ctx, "/StressTestingInnerService/playerAllQuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stressTestingInnerServiceClient) UploadStatistics(ctx context.Context, in *UploadStatisticsRequest, opts ...grpc.CallOption) (*UploadStatisticsResponse, error) {
	out := new(UploadStatisticsResponse)
	err := c.cc.Invoke(ctx, "/StressTestingInnerService/uploadStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StressTestingInnerServiceServer is the server API for StressTestingInnerService service.
// All implementations must embed UnimplementedStressTestingInnerServiceServer
// for forward compatibility
type StressTestingInnerServiceServer interface {
	// 连接master
	ConnectMaster(context.Context, *ConnectMasterRequest) (*ConnectMasterResponse, error)
	// 玩家登录
	PlayerLogin(context.Context, *PlayerLoginRequest) (*PlayerLoginResponse, error)
	// 所有玩家停止压力测试
	PlayerAllQuit(context.Context, *PlayerAllQuitRequest) (*PlayerAllQuitResponse, error)
	// 上传统计日志
	UploadStatistics(context.Context, *UploadStatisticsRequest) (*UploadStatisticsResponse, error)
	mustEmbedUnimplementedStressTestingInnerServiceServer()
}

// UnimplementedStressTestingInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStressTestingInnerServiceServer struct {
}

func (UnimplementedStressTestingInnerServiceServer) ConnectMaster(context.Context, *ConnectMasterRequest) (*ConnectMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectMaster not implemented")
}
func (UnimplementedStressTestingInnerServiceServer) PlayerLogin(context.Context, *PlayerLoginRequest) (*PlayerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerLogin not implemented")
}
func (UnimplementedStressTestingInnerServiceServer) PlayerAllQuit(context.Context, *PlayerAllQuitRequest) (*PlayerAllQuitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerAllQuit not implemented")
}
func (UnimplementedStressTestingInnerServiceServer) UploadStatistics(context.Context, *UploadStatisticsRequest) (*UploadStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadStatistics not implemented")
}
func (UnimplementedStressTestingInnerServiceServer) mustEmbedUnimplementedStressTestingInnerServiceServer() {
}

// UnsafeStressTestingInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StressTestingInnerServiceServer will
// result in compilation errors.
type UnsafeStressTestingInnerServiceServer interface {
	mustEmbedUnimplementedStressTestingInnerServiceServer()
}

func RegisterStressTestingInnerServiceServer(s grpc.ServiceRegistrar, srv StressTestingInnerServiceServer) {
	s.RegisterService(&StressTestingInnerService_ServiceDesc, srv)
}

func _StressTestingInnerService_ConnectMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StressTestingInnerServiceServer).ConnectMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StressTestingInnerService/connectMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StressTestingInnerServiceServer).ConnectMaster(ctx, req.(*ConnectMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StressTestingInnerService_PlayerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StressTestingInnerServiceServer).PlayerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StressTestingInnerService/playerLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StressTestingInnerServiceServer).PlayerLogin(ctx, req.(*PlayerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StressTestingInnerService_PlayerAllQuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerAllQuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StressTestingInnerServiceServer).PlayerAllQuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StressTestingInnerService/playerAllQuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StressTestingInnerServiceServer).PlayerAllQuit(ctx, req.(*PlayerAllQuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StressTestingInnerService_UploadStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StressTestingInnerServiceServer).UploadStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StressTestingInnerService/uploadStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StressTestingInnerServiceServer).UploadStatistics(ctx, req.(*UploadStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StressTestingInnerService_ServiceDesc is the grpc.ServiceDesc for StressTestingInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StressTestingInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StressTestingInnerService",
	HandlerType: (*StressTestingInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "connectMaster",
			Handler:    _StressTestingInnerService_ConnectMaster_Handler,
		},
		{
			MethodName: "playerLogin",
			Handler:    _StressTestingInnerService_PlayerLogin_Handler,
		},
		{
			MethodName: "playerAllQuit",
			Handler:    _StressTestingInnerService_PlayerAllQuit_Handler,
		},
		{
			MethodName: "uploadStatistics",
			Handler:    _StressTestingInnerService_UploadStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "StressTestingInnerRpc.proto",
}
